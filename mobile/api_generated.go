
// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: Johan
package lndmobile

import (
	"context"

	"github.com/golang/protobuf/proto"
	"github.com/lightningnetwork/lnd/lnrpc"
)

func WalletBalance(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.WalletBalanceRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.WalletBalanceRequest)
			return client.WalletBalance(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ChannelBalance(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ChannelBalanceRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ChannelBalanceRequest)
			return client.ChannelBalance(ctx, r)
		},
	}
	s.start(msg, callback)
}

func GetTransactions(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.GetTransactionsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.GetTransactionsRequest)
			return client.GetTransactions(ctx, r)
		},
	}
	s.start(msg, callback)
}

func SendCoins(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.SendCoinsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.SendCoinsRequest)
			return client.SendCoins(ctx, r)
		},
	}
	s.start(msg, callback)
}

func SendMany(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.SendManyRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.SendManyRequest)
			return client.SendMany(ctx, r)
		},
	}
	s.start(msg, callback)
}

func NewAddress(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.NewAddressRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.NewAddressRequest)
			return client.NewAddress(ctx, r)
		},
	}
	s.start(msg, callback)
}

func NewWitnessAddress(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.NewWitnessAddressRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.NewWitnessAddressRequest)
			return client.NewWitnessAddress(ctx, r)
		},
	}
	s.start(msg, callback)
}

func SignMessage(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.SignMessageRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.SignMessageRequest)
			return client.SignMessage(ctx, r)
		},
	}
	s.start(msg, callback)
}

func VerifyMessage(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.VerifyMessageRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.VerifyMessageRequest)
			return client.VerifyMessage(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ConnectPeer(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ConnectPeerRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ConnectPeerRequest)
			return client.ConnectPeer(ctx, r)
		},
	}
	s.start(msg, callback)
}

func DisconnectPeer(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.DisconnectPeerRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.DisconnectPeerRequest)
			return client.DisconnectPeer(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ListPeers(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ListPeersRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ListPeersRequest)
			return client.ListPeers(ctx, r)
		},
	}
	s.start(msg, callback)
}

func PendingChannels(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.PendingChannelsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.PendingChannelsRequest)
			return client.PendingChannels(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ListChannels(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ListChannelsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ListChannelsRequest)
			return client.ListChannels(ctx, r)
		},
	}
	s.start(msg, callback)
}

func OpenChannelSync(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.OpenChannelRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.OpenChannelRequest)
			return client.OpenChannelSync(ctx, r)
		},
	}
	s.start(msg, callback)
}

func SendPaymentSync(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.SendRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.SendRequest)
			return client.SendPaymentSync(ctx, r)
		},
	}
	s.start(msg, callback)
}

func AddInvoice(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.Invoice{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.Invoice)
			return client.AddInvoice(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ListInvoices(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ListInvoiceRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ListInvoiceRequest)
			return client.ListInvoices(ctx, r)
		},
	}
	s.start(msg, callback)
}

func LookupInvoice(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.PaymentHash{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.PaymentHash)
			return client.LookupInvoice(ctx, r)
		},
	}
	s.start(msg, callback)
}

func DecodePayReq(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.PayReqString{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.PayReqString)
			return client.DecodePayReq(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ListPayments(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ListPaymentsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ListPaymentsRequest)
			return client.ListPayments(ctx, r)
		},
	}
	s.start(msg, callback)
}

func DeleteAllPayments(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.DeleteAllPaymentsRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.DeleteAllPaymentsRequest)
			return client.DeleteAllPayments(ctx, r)
		},
	}
	s.start(msg, callback)
}

func DescribeGraph(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ChannelGraphRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ChannelGraphRequest)
			return client.DescribeGraph(ctx, r)
		},
	}
	s.start(msg, callback)
}

func GetChanInfo(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ChanInfoRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ChanInfoRequest)
			return client.GetChanInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}

func GetNodeInfo(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.NodeInfoRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.NodeInfoRequest)
			return client.GetNodeInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}

func QueryRoutes(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.QueryRoutesRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.QueryRoutesRequest)
			return client.QueryRoutes(ctx, r)
		},
	}
	s.start(msg, callback)
}

func GetNetworkInfo(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.NetworkInfoRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.NetworkInfoRequest)
			return client.GetNetworkInfo(ctx, r)
		},
	}
	s.start(msg, callback)
}

func StopDaemon(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.StopRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.StopRequest)
			return client.StopDaemon(ctx, r)
		},
	}
	s.start(msg, callback)
}

func DebugLevel(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.DebugLevelRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.DebugLevelRequest)
			return client.DebugLevel(ctx, r)
		},
	}
	s.start(msg, callback)
}

func FeeReport(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.FeeReportRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.FeeReportRequest)
			return client.FeeReport(ctx, r)
		},
	}
	s.start(msg, callback)
}

func UpdateChannelPolicy(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.PolicyUpdateRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.PolicyUpdateRequest)
			return client.UpdateChannelPolicy(ctx, r)
		},
	}
	s.start(msg, callback)
}

func ForwardingHistory(msg []byte, callback Callback) {
	s := &onceHandler{
		newProto: func() proto.Message {
			return &lnrpc.ForwardingHistoryRequest{}
		},
		getSync: func(ctx context.Context, client lnrpc.LightningClient,
			req proto.Message) (proto.Message, error) {
			r := req.(*lnrpc.ForwardingHistoryRequest)
			return client.ForwardingHistory(ctx, r)
		},
	}
	s.start(msg, callback)
}
